/* soapRemoteDiscoveryBindingProxy.h
   Generated by gSOAP 2.7.17 from onvif.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapRemoteDiscoveryBindingProxy_H
#define soapRemoteDiscoveryBindingProxy_H
#include "soapH.h"

class SOAP_CMAC RemoteDiscoveryBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'RemoteDiscoveryBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	RemoteDiscoveryBindingProxy();
	/// Constructor with copy of another engine state
	RemoteDiscoveryBindingProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	RemoteDiscoveryBindingProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	RemoteDiscoveryBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~RemoteDiscoveryBindingProxy();
	/// Initializer used by constructors
	virtual	void RemoteDiscoveryBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Hello' (returns error code or SOAP_OK)
	virtual	int Hello(ns1__HelloType *tdn__Hello, ns1__ResolveType *tdn__HelloResponse);

	/// Web service operation 'Bye' (returns error code or SOAP_OK)
	virtual	int Bye(ns1__ByeType *tdn__Bye, ns1__ResolveType *tdn__ByeResponse);
};
#endif
